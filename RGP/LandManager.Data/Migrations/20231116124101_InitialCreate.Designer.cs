// <auto-generated />
using System;
using LandManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LandManager.Data.Migrations
{
    [DbContext(typeof(LandManagerContext))]
    [Migration("20231116124101_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("LandManager.Models.LandParcel", b =>
                {
                    b.Property<int>("LandParcelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LandPropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SurveyDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalAreaInHectares")
                        .HasColumnType("REAL");

                    b.HasKey("LandParcelId");

                    b.HasIndex("LandPropertyId");

                    b.ToTable("LandParcels");
                });

            modelBuilder.Entity("LandManager.Models.LandProperty", b =>
                {
                    b.Property<int>("LandPropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CadastreNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LandPropertyId");

                    b.HasIndex("OwnerId");

                    b.ToTable("LandProperties");
                });

            modelBuilder.Entity("LandManager.Models.LandUse", b =>
                {
                    b.Property<int>("LandUseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AreaInHectares")
                        .HasColumnType("REAL");

                    b.Property<int>("LandParcelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LandUseId");

                    b.HasIndex("LandParcelId");

                    b.ToTable("LandUses");
                });

            modelBuilder.Entity("LandManager.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonalCodeOrRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("LandManager.Models.LandParcel", b =>
                {
                    b.HasOne("LandManager.Models.LandProperty", "LandProperty")
                        .WithMany("LandParcels")
                        .HasForeignKey("LandPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LandProperty");
                });

            modelBuilder.Entity("LandManager.Models.LandProperty", b =>
                {
                    b.HasOne("LandManager.Models.Person", "Owner")
                        .WithMany("LandProperties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("LandManager.Models.LandUse", b =>
                {
                    b.HasOne("LandManager.Models.LandParcel", "LandParcel")
                        .WithMany("LandUses")
                        .HasForeignKey("LandParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LandParcel");
                });

            modelBuilder.Entity("LandManager.Models.LandParcel", b =>
                {
                    b.Navigation("LandUses");
                });

            modelBuilder.Entity("LandManager.Models.LandProperty", b =>
                {
                    b.Navigation("LandParcels");
                });

            modelBuilder.Entity("LandManager.Models.Person", b =>
                {
                    b.Navigation("LandProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
